{"ast":null,"code":"var _jsxFileName = \"/Users/srimanthreddy/Documents/AIFitnessandMealPlanner/client/src/components/ChatBot/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport ChatBotIcon from './ChatBotIcon';\nimport ChatBotDialog from './ChatBotDialog';\nimport { getChatbotResponse } from '../../utils/api';\nimport { UserContext } from '../../contexts/UserContext';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const {\n    user\n  } = useContext(UserContext);\n\n  // Load conversation history from localStorage when component mounts\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('chatHistory');\n    if (savedHistory) {\n      try {\n        setConversationHistory(JSON.parse(savedHistory));\n      } catch (e) {\n        console.error('Error parsing chat history:', e);\n      }\n    }\n  }, []);\n\n  // Save conversation history to localStorage when it changes\n  useEffect(() => {\n    if (conversationHistory.length > 0) {\n      localStorage.setItem('chatHistory', JSON.stringify(conversationHistory));\n    }\n  }, [conversationHistory]);\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n  const sendMessage = async message => {\n    try {\n      // Add message to conversation history\n      const newHistory = [...conversationHistory, {\n        role: 'user',\n        content: message\n      }];\n      setConversationHistory(newHistory);\n\n      // Get user preferences if available\n      const userPreferences = user ? {\n        dietaryPreferences: user.dietaryPreferences || [],\n        allergies: user.allergies || [],\n        calorieTarget: user.calorieTarget || 2000\n      } : null;\n\n      // Send message, history and user preferences to backend\n      const response = await getChatbotResponse(message, newHistory, userPreferences);\n\n      // Add response to conversation history\n      setConversationHistory([...newHistory, {\n        role: 'assistant',\n        content: response.message\n      }]);\n      return response.message;\n    } catch (error) {\n      console.error('Error in chatbot response:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(ChatBotIcon, {\n      onClick: toggleChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBotDialog, {\n      isOpen: isOpen,\n      onClose: () => setIsOpen(false),\n      sendMessage: sendMessage,\n      userPreferences: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"HODwOqTis4la2vit3p83WRfZtFI=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useContext","useEffect","ChatBotIcon","ChatBotDialog","getChatbotResponse","UserContext","jsxDEV","_jsxDEV","ChatBot","_s","isOpen","setIsOpen","conversationHistory","setConversationHistory","user","savedHistory","localStorage","getItem","JSON","parse","e","console","error","length","setItem","stringify","toggleChat","sendMessage","message","newHistory","role","content","userPreferences","dietaryPreferences","allergies","calorieTarget","response","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c","$RefreshReg$"],"sources":["/Users/srimanthreddy/Documents/AIFitnessandMealPlanner/client/src/components/ChatBot/ChatBot.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport ChatBotIcon from './ChatBotIcon';\nimport ChatBotDialog from './ChatBotDialog';\nimport { getChatbotResponse } from '../../utils/api';\nimport { UserContext } from '../../contexts/UserContext';\nimport './ChatBot.css';\n\nconst ChatBot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const { user } = useContext(UserContext);\n\n  // Load conversation history from localStorage when component mounts\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('chatHistory');\n    if (savedHistory) {\n      try {\n        setConversationHistory(JSON.parse(savedHistory));\n      } catch (e) {\n        console.error('Error parsing chat history:', e);\n      }\n    }\n  }, []);\n\n  // Save conversation history to localStorage when it changes\n  useEffect(() => {\n    if (conversationHistory.length > 0) {\n      localStorage.setItem('chatHistory', JSON.stringify(conversationHistory));\n    }\n  }, [conversationHistory]);\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const sendMessage = async (message) => {\n    try {\n      // Add message to conversation history\n      const newHistory = [...conversationHistory, { role: 'user', content: message }];\n      setConversationHistory(newHistory);\n      \n      // Get user preferences if available\n      const userPreferences = user ? {\n        dietaryPreferences: user.dietaryPreferences || [],\n        allergies: user.allergies || [],\n        calorieTarget: user.calorieTarget || 2000\n      } : null;\n      \n      // Send message, history and user preferences to backend\n      const response = await getChatbotResponse(message, newHistory, userPreferences);\n      \n      // Add response to conversation history\n      setConversationHistory([...newHistory, { role: 'assistant', content: response.message }]);\n      \n      return response.message;\n    } catch (error) {\n      console.error('Error in chatbot response:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <ChatBotIcon onClick={toggleChat} />\n      <ChatBotDialog \n        isOpen={isOpen} \n        onClose={() => setIsOpen(false)} \n        sendMessage={sendMessage}\n        userPreferences={user}\n      />\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}